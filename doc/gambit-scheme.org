#+TITLE: Gambit Scheme: a full implementation of the Scheme language

Here's the idea: A minimal import that allows a near full Gambit runtime
environment.

#+begin_src shell
cd packages/ ; mkdir gambit-scheme/ ; cd gambit-scheme; yarn init
# yarn init v1.22.5
# question name (gambit-scheme):
# question version (1.0.0): 0.0.0
# question description: Gambit Scheme Runtime and Environment
# question entry point (index.js):
# question repository url: git@github.com:drewc/gxjs.git
# question author: Drew Crampsie <me@drewc.ca>
# question license (MIT): Apache-2.0
# question private: false
# success Saved package.json

yarn run lerna add gambit-loader
#+end_src

* Usage
:PROPERTIES:
:CUSTOM_ID: GambitSchemeUsage
:END:

The package ~gambit-scheme~ contains a minimal runtime generated by the *Gambit
Scheme* environment. It attempts to be small yet contain enough to develop and
application with the option to add and load *Gambit* modules.

To load a ~.scm~ file, ~gambit-loader~ is the easy way. The options are the same
as [[https://www.npmjs.com/package/gxjs-loader][~gxjs-loader~]].

Here is ~gambit-scheme-usage.scm~.

#+begin_src scheme :tangle ../packages/gxjs-tests/gambit-scheme-usage.scm
(declare (extended-bindings))

(##inline-host-declaration "console.log('Started Gambit loaded file!')")


(define gambit-vector
  (##vector
   42 'this "is how we hake the moonshine"))


(define (this-is-gambit! #!optional (val 42))
  (let ((three (##inline-host-expression "{ answer: 42 };")))
    (##inline-host-statement "console.log('This is Gambit!', (@1@), (@2@), (@3@))"
                           val gambit-vector three)))

(##inline-host-statement "console.log('finished Gambit-loaded file');
 module.exports = RTS.scm2host(@1@);" this-is-gambit!)
#+end_src

Now for a *JavaScript* file, ~gambit-scheme-usage.js~. We'll make this a
CommonJS module.

We do not actually need to ~require('gambit-scheme')~ here at all but the ~RTS~
is exported pretty much so we can see just that.

#+begin_src javascript :tangle ../packages/gxjs-tests/gambit-scheme-usage.js
const RTS = require('gambit-scheme');

const thisIsGambit = require('gambit-loader!./gambit-scheme-usage.scm');

thisIsGambit(0.42);

module.exports = RTS;
#+end_src

Running that outputs this.

#+begin_src javascript
Started Gambit loaded file!
finished Gambit-loaded file
This is Gambit! { val: 0.42 } [
  42,
  { name: 'this', hash: 439079553, interned: true },
  {
    codes: [
      105, 115,  32, 104, 111, 119,  32,
      119, 101,  32, 104,  97, 107, 101,
       32, 116, 104, 101,  32, 109, 111,
      111, 110, 115, 104, 105, 110, 101
    ]
  }
] { answer: 42 }
#+end_src

By default ~gambit-loader~ automagically requires ~gambit-scheme~ by prepending ~const RTS = require('gambit-scheme');~ to the top of the "file".

#+begin_src scheme :tangle ../packages/gxjs-tests/gambit-scheme-auto.scm
(declare (extended-bindings))
(##inline-host-statement #<<EOF
console.log('Ok, auto RTS!', Object.keys(RTS.glo).length)

module.exports = RTS;

EOF
)
#+end_src

#+begin_src javascript :tangle ../packages/gxjs-tests/gambit-scheme-auto.js
const RTS = require('./gambit-scheme-usage.js');
const sameRTS = require('gambit-loader!./gambit-scheme-auto.scm');

console.log('Same Runtime?', RTS === sameRTS);

#+end_src

That outputs this:

#+begin_src javascript
Started Gambit loaded file!
finished Gambit-loaded file
This is Gambit! { val: 0.42 } [
  42,
  { name: 'this', hash: 439079553, interned: true },
  {
    codes: [
      105, 115,  32, 104, 111, 119,  32,
      119, 101,  32, 104,  97, 107, 101,
       32, 116, 104, 101,  32, 109, 111,
      111, 110, 115, 104, 105, 110, 101
    ]
  }
] { answer: 42 }
Ok, auto RTS! 127
Same Runtime? true

#+end_src

* The Minimal Universal Runtime: TMUR!

[[file:universal.org::*Introduction][We've got a minimal runtime]]. I figure we can use it and add only the needed
parts here.

* Make a few Prims "exteral"

#+begin_src scheme :tangle ../packages/gambit-scheme/prims.scm
(declare (extended-bindings))
(namespace (""))

(define-prim (foreign? obj) (##foreign? obj))

;;; (##inline-host-declaration "console.log('Success declare for prims.scm!!')")
;;; (##inline-host-statement "console.log('Success statement for prims.scm!!')")
#+end_src

* ~gambit-scheme.js~

#+begin_src javascript :tangle ../packages/gambit-scheme/gambit-scheme.js
const RTS = require('./runtime.js');
require('gxjs-loader?RTS=./runtime.js&gxGambcSharp=false!./prims.scm');

module.exports = RTS;
#+end_src




* /File/ ~webpack.config.js~

#+begin_src javascript :tangle "../packages/gambit-scheme/webpack.config.js"
const TerserPlugin = require("terser-webpack-plugin");
const path = require('path');

module.exports = {
  // mode: 'development',
  mode: 'production',
  entry: { 'gambit-scheme': './gambit-scheme.js' },
  output: {
    path: path.resolve(__dirname, './dist'),
    filename: '[name].js',
    library: 'gambitScheme',
    libraryTarget: 'umd',
    globalObject: 'this'
  },
  devServer: {
    contentBase: './dist',
    port: 8484
  },
  optimization: {
    minimize: true,
    minimizer: [new TerserPlugin({})],
  },
    module: {
      rules: [
        {
          test: /\.js$/,
          exclude: /(node_modules|bower_components)/,
          use: {
            loader: 'babel-loader',
            options: {
              comments: false,
              presets: ['@babel/preset-env', 'minify'],
              //plugins: [["minify-mangle-names", { topLevel: true } ]]
          }
         }
        }
     ]
    },
};
#+end_src
